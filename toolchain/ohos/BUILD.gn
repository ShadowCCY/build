# Copyright 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/clang/clang.gni")
import("//build/config/ohos/config.gni")
import("//build/config/sysroot.gni")  # Imports ohos/config.gni.
import("//build/toolchain/gcc_toolchain.gni")

declare_args() {
  # Whether unstripped binaries, i.e. compiled with debug symbols, should be
  # considered runtime_deps rather than stripped ones.
  ohos_unstripped_runtime_outputs = true
}

# The ohos clang toolchains share most of the same parameters, so we have this
# wrapper around gcc_toolchain to avoid duplication of logic.
#
# Parameters:
#  - toolchain_root
#      Path to cpu-specific toolchain within the ndk.
#  - sysroot
#      Sysroot for this architecture.
#  - lib_dir
#      Subdirectory inside of sysroot where libs go.
#  - binary_prefix
#      Prefix of compiler executables.
template("ohos_clang_toolchain") {
  gcc_toolchain(target_name) {
    assert(defined(invoker.toolchain_args),
           "toolchain_args must be defined for ohos_clang_toolchain()")
    toolchain_args = invoker.toolchain_args
    toolchain_args.current_os = "ohos"

    # Output linker map files for binary size analysis.
    enable_linker_map = true

    if (use_musl) {
      print(invoker.sysroot)
      print(invoker.lib_dir)
      ohos_libc_dir = rebase_path("//prebuilts/lite/sysroot/usr/lib/arm-linux-ohosmusl", root_build_dir)
      libs_section_prefix = "$ohos_libc_dir/Scrt1.o"
      libs_section_prefix += " $ohos_libc_dir/crti.o"
      libs_section_postfix = "$ohos_libc_dir/crtn.o"
    } else {
      _ndk_lib =
          rebase_path(invoker.sysroot + "/" + invoker.lib_dir, root_build_dir)
      libs_section_prefix = "$_ndk_lib/crtbegin_dynamic.o"
      libs_section_postfix = "$_ndk_lib/crtend_android.o"

      solink_libs_section_prefix = "$_ndk_lib/crtbegin_so.o"
      solink_libs_section_postfix = "$_ndk_lib/crtend_so.o"
    }


    _prefix = rebase_path("$clang_base_path/bin", root_build_dir)
    cc = "$_prefix/clang"
    cxx = "$_prefix/clang++"
    ar = "$_prefix/llvm-ar"
    ld = cxx
    readelf ="$_prefix/llvm-readobj"
    nm = "$_prefix/llvm-nm"
    strip = rebase_path("$clang_base_path/bin/llvm-strip", root_build_dir)
    use_unstripped_as_runtime_outputs = ohos_unstripped_runtime_outputs

    # Don't use .cr.so for loadable_modules since they are always loaded via
    # absolute path.
    loadable_module_extension = ".so"
  }
}

ohos_clang_toolchain("ohos_clang_x86") {
  sysroot = "$base_libs_root/$x86_sysroot_subdir"
  lib_dir = "usr/lib"
  toolchain_args = {
    current_cpu = "x86"
  }
}

ohos_clang_toolchain("ohos_clang_arm") {
  sysroot = "$base_libs_root/$arm_sysroot_subdir"
  lib_dir = "usr/lib"
  toolchain_args = {
    current_cpu = "arm"
  }
}

ohos_clang_toolchain("ohos_clang_x86_64") {
  sysroot = "$base_libs_root/$x86_64_sysroot_subdir"
  lib_dir = "usr/lib"
  toolchain_args = {
    current_cpu = "x86_64"
    target_platform = "phone"
  }
}

ohos_clang_toolchain("ohos_clang_arm64") {
  sysroot = "$base_libs_root/$arm64_sysroot_subdir"
  lib_dir = "usr/lib"
  toolchain_args = {
    current_cpu = "arm64"
    target_platform = "phone"
  }
}

